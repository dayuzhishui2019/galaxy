// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package shared

import(
	"bytes"
	"context"
  "git.apache.org/thrift.git/lib/go/thrift"
  "reflect"
	"fmt"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

// Attributes:
//  - DataType
//  - RecordId
//  - ProxyIp
//  - ProxyPort
//  - UploadTime
//  - RawData
//  - ResJson
//  - Res1Json
//  - Res2Json
type IotInfo struct {
  DataType string `thrift:"dataType,1" db:"dataType" json:"dataType"`
  RecordId string `thrift:"recordId,2" db:"recordId" json:"recordId"`
  ProxyIp string `thrift:"proxyIp,3" db:"proxyIp" json:"proxyIp"`
  ProxyPort int32 `thrift:"proxyPort,4" db:"proxyPort" json:"proxyPort"`
  UploadTime int64 `thrift:"uploadTime,5" db:"uploadTime" json:"uploadTime"`
  RawData []byte `thrift:"rawData,6" db:"rawData" json:"rawData"`
  ResJson string `thrift:"resJson,7" db:"resJson" json:"resJson"`
  Res1Json string `thrift:"res1Json,8" db:"res1Json" json:"res1Json"`
  Res2Json string `thrift:"res2Json,9" db:"res2Json" json:"res2Json"`
}

func NewIotInfo() *IotInfo {
  return &IotInfo{}
}


func (p *IotInfo) GetDataType() string {
  return p.DataType
}

func (p *IotInfo) GetRecordId() string {
  return p.RecordId
}

func (p *IotInfo) GetProxyIp() string {
  return p.ProxyIp
}

func (p *IotInfo) GetProxyPort() int32 {
  return p.ProxyPort
}

func (p *IotInfo) GetUploadTime() int64 {
  return p.UploadTime
}

func (p *IotInfo) GetRawData() []byte {
  return p.RawData
}

func (p *IotInfo) GetResJson() string {
  return p.ResJson
}

func (p *IotInfo) GetRes1Json() string {
  return p.Res1Json
}

func (p *IotInfo) GetRes2Json() string {
  return p.Res2Json
}
func (p *IotInfo) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IotInfo)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DataType = v
}
  return nil
}

func (p *IotInfo)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.RecordId = v
}
  return nil
}

func (p *IotInfo)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ProxyIp = v
}
  return nil
}

func (p *IotInfo)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.ProxyPort = v
}
  return nil
}

func (p *IotInfo)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.UploadTime = v
}
  return nil
}

func (p *IotInfo)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.RawData = v
}
  return nil
}

func (p *IotInfo)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.ResJson = v
}
  return nil
}

func (p *IotInfo)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.Res1Json = v
}
  return nil
}

func (p *IotInfo)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.Res2Json = v
}
  return nil
}

func (p *IotInfo) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("IotInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IotInfo) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("dataType", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:dataType: ", p), err) }
  if err := oprot.WriteString(string(p.DataType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dataType (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:dataType: ", p), err) }
  return err
}

func (p *IotInfo) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("recordId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:recordId: ", p), err) }
  if err := oprot.WriteString(string(p.RecordId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.recordId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:recordId: ", p), err) }
  return err
}

func (p *IotInfo) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("proxyIp", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:proxyIp: ", p), err) }
  if err := oprot.WriteString(string(p.ProxyIp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.proxyIp (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:proxyIp: ", p), err) }
  return err
}

func (p *IotInfo) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("proxyPort", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:proxyPort: ", p), err) }
  if err := oprot.WriteI32(int32(p.ProxyPort)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.proxyPort (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:proxyPort: ", p), err) }
  return err
}

func (p *IotInfo) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uploadTime", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:uploadTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.UploadTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uploadTime (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:uploadTime: ", p), err) }
  return err
}

func (p *IotInfo) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rawData", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:rawData: ", p), err) }
  if err := oprot.WriteBinary(p.RawData); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rawData (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:rawData: ", p), err) }
  return err
}

func (p *IotInfo) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resJson", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:resJson: ", p), err) }
  if err := oprot.WriteString(string(p.ResJson)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.resJson (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:resJson: ", p), err) }
  return err
}

func (p *IotInfo) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("res1Json", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:res1Json: ", p), err) }
  if err := oprot.WriteString(string(p.Res1Json)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.res1Json (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:res1Json: ", p), err) }
  return err
}

func (p *IotInfo) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("res2Json", thrift.STRING, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:res2Json: ", p), err) }
  if err := oprot.WriteString(string(p.Res2Json)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.res2Json (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:res2Json: ", p), err) }
  return err
}

func (p *IotInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IotInfo(%+v)", *p)
}

type DAGThriftService interface {
  // Parameters:
  //  - Data
  Upload(ctx context.Context, data *IotInfo) (r int32, err error)
  // Parameters:
  //  - Datas
  BatchUpload(ctx context.Context, datas []*IotInfo) (r int32, err error)
}

type DAGThriftServiceClient struct {
  c thrift.TClient
}

func NewDAGThriftServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *DAGThriftServiceClient {
  return &DAGThriftServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewDAGThriftServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *DAGThriftServiceClient {
  return &DAGThriftServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewDAGThriftServiceClient(c thrift.TClient) *DAGThriftServiceClient {
  return &DAGThriftServiceClient{
    c: c,
  }
}

func (p *DAGThriftServiceClient) Client_() thrift.TClient {
  return p.c
}
// Parameters:
//  - Data
func (p *DAGThriftServiceClient) Upload(ctx context.Context, data *IotInfo) (r int32, err error) {
  var _args0 DAGThriftServiceUploadArgs
  _args0.Data = data
  var _result1 DAGThriftServiceUploadResult
  if err = p.Client_().Call(ctx, "upload", &_args0, &_result1); err != nil {
    return
  }
  return _result1.GetSuccess(), nil
}

// Parameters:
//  - Datas
func (p *DAGThriftServiceClient) BatchUpload(ctx context.Context, datas []*IotInfo) (r int32, err error) {
  var _args2 DAGThriftServiceBatchUploadArgs
  _args2.Datas = datas
  var _result3 DAGThriftServiceBatchUploadResult
  if err = p.Client_().Call(ctx, "batchUpload", &_args2, &_result3); err != nil {
    return
  }
  return _result3.GetSuccess(), nil
}

type DAGThriftServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler DAGThriftService
}

func (p *DAGThriftServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *DAGThriftServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *DAGThriftServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewDAGThriftServiceProcessor(handler DAGThriftService) *DAGThriftServiceProcessor {

  self4 := &DAGThriftServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self4.processorMap["upload"] = &dAGThriftServiceProcessorUpload{handler:handler}
  self4.processorMap["batchUpload"] = &dAGThriftServiceProcessorBatchUpload{handler:handler}
return self4
}

func (p *DAGThriftServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x5 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x5.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x5

}

type dAGThriftServiceProcessorUpload struct {
  handler DAGThriftService
}

func (p *dAGThriftServiceProcessorUpload) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := DAGThriftServiceUploadArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("upload", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := DAGThriftServiceUploadResult{}
var retval int32
  var err2 error
  if retval, err2 = p.handler.Upload(ctx, args.Data); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing upload: " + err2.Error())
    oprot.WriteMessageBegin("upload", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("upload", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type dAGThriftServiceProcessorBatchUpload struct {
  handler DAGThriftService
}

func (p *dAGThriftServiceProcessorBatchUpload) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := DAGThriftServiceBatchUploadArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("batchUpload", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := DAGThriftServiceBatchUploadResult{}
var retval int32
  var err2 error
  if retval, err2 = p.handler.BatchUpload(ctx, args.Datas); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing batchUpload: " + err2.Error())
    oprot.WriteMessageBegin("batchUpload", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("batchUpload", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Data
type DAGThriftServiceUploadArgs struct {
  Data *IotInfo `thrift:"data,1" db:"data" json:"data"`
}

func NewDAGThriftServiceUploadArgs() *DAGThriftServiceUploadArgs {
  return &DAGThriftServiceUploadArgs{}
}

var DAGThriftServiceUploadArgs_Data_DEFAULT *IotInfo
func (p *DAGThriftServiceUploadArgs) GetData() *IotInfo {
  if !p.IsSetData() {
    return DAGThriftServiceUploadArgs_Data_DEFAULT
  }
return p.Data
}
func (p *DAGThriftServiceUploadArgs) IsSetData() bool {
  return p.Data != nil
}

func (p *DAGThriftServiceUploadArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DAGThriftServiceUploadArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Data = &IotInfo{}
  if err := p.Data.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Data), err)
  }
  return nil
}

func (p *DAGThriftServiceUploadArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("upload_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DAGThriftServiceUploadArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("data", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:data: ", p), err) }
  if err := p.Data.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Data), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:data: ", p), err) }
  return err
}

func (p *DAGThriftServiceUploadArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DAGThriftServiceUploadArgs(%+v)", *p)
}

// Attributes:
//  - Success
type DAGThriftServiceUploadResult struct {
  Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDAGThriftServiceUploadResult() *DAGThriftServiceUploadResult {
  return &DAGThriftServiceUploadResult{}
}

var DAGThriftServiceUploadResult_Success_DEFAULT int32
func (p *DAGThriftServiceUploadResult) GetSuccess() int32 {
  if !p.IsSetSuccess() {
    return DAGThriftServiceUploadResult_Success_DEFAULT
  }
return *p.Success
}
func (p *DAGThriftServiceUploadResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *DAGThriftServiceUploadResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DAGThriftServiceUploadResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *DAGThriftServiceUploadResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("upload_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DAGThriftServiceUploadResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *DAGThriftServiceUploadResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DAGThriftServiceUploadResult(%+v)", *p)
}

// Attributes:
//  - Datas
type DAGThriftServiceBatchUploadArgs struct {
  Datas []*IotInfo `thrift:"datas,1" db:"datas" json:"datas"`
}

func NewDAGThriftServiceBatchUploadArgs() *DAGThriftServiceBatchUploadArgs {
  return &DAGThriftServiceBatchUploadArgs{}
}


func (p *DAGThriftServiceBatchUploadArgs) GetDatas() []*IotInfo {
  return p.Datas
}
func (p *DAGThriftServiceBatchUploadArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DAGThriftServiceBatchUploadArgs)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*IotInfo, 0, size)
  p.Datas =  tSlice
  for i := 0; i < size; i ++ {
    _elem6 := &IotInfo{}
    if err := _elem6.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem6), err)
    }
    p.Datas = append(p.Datas, _elem6)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *DAGThriftServiceBatchUploadArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("batchUpload_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DAGThriftServiceBatchUploadArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("datas", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:datas: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Datas)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Datas {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:datas: ", p), err) }
  return err
}

func (p *DAGThriftServiceBatchUploadArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DAGThriftServiceBatchUploadArgs(%+v)", *p)
}

// Attributes:
//  - Success
type DAGThriftServiceBatchUploadResult struct {
  Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDAGThriftServiceBatchUploadResult() *DAGThriftServiceBatchUploadResult {
  return &DAGThriftServiceBatchUploadResult{}
}

var DAGThriftServiceBatchUploadResult_Success_DEFAULT int32
func (p *DAGThriftServiceBatchUploadResult) GetSuccess() int32 {
  if !p.IsSetSuccess() {
    return DAGThriftServiceBatchUploadResult_Success_DEFAULT
  }
return *p.Success
}
func (p *DAGThriftServiceBatchUploadResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *DAGThriftServiceBatchUploadResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DAGThriftServiceBatchUploadResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *DAGThriftServiceBatchUploadResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("batchUpload_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DAGThriftServiceBatchUploadResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *DAGThriftServiceBatchUploadResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DAGThriftServiceBatchUploadResult(%+v)", *p)
}


