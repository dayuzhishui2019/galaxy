// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package iodface

import(
	"bytes"
	"context"
  "git.apache.org/thrift.git/lib/go/thrift"
  "reflect"
	"fmt"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

// Attributes:
//  - GUID
//  - ProxyIp
//  - ProxyPort
//  - UploadTime
//  - DevIp
//  - DevPort
//  - AbsTime
//  - StayDuration
//  - ImageList
//  - Res
//  - DevID
type FaceInfo struct {
  GUID string `thrift:"guid,1" db:"guid" json:"guid"`
  ProxyIp string `thrift:"proxyIp,2" db:"proxyIp" json:"proxyIp"`
  ProxyPort int32 `thrift:"proxyPort,3" db:"proxyPort" json:"proxyPort"`
  UploadTime string `thrift:"uploadTime,4" db:"uploadTime" json:"uploadTime"`
  DevIp string `thrift:"devIp,5" db:"devIp" json:"devIp"`
  DevPort int32 `thrift:"devPort,6" db:"devPort" json:"devPort"`
  AbsTime string `thrift:"absTime,7" db:"absTime" json:"absTime"`
  StayDuration int32 `thrift:"stayDuration,8" db:"stayDuration" json:"stayDuration"`
  ImageList []*ImageContent `thrift:"imageList,9" db:"imageList" json:"imageList"`
  Res string `thrift:"res,10" db:"res" json:"res"`
  DevID string `thrift:"devID,11" db:"devID" json:"devID"`
}

func NewFaceInfo() *FaceInfo {
  return &FaceInfo{}
}


func (p *FaceInfo) GetGUID() string {
  return p.GUID
}

func (p *FaceInfo) GetProxyIp() string {
  return p.ProxyIp
}

func (p *FaceInfo) GetProxyPort() int32 {
  return p.ProxyPort
}

func (p *FaceInfo) GetUploadTime() string {
  return p.UploadTime
}

func (p *FaceInfo) GetDevIp() string {
  return p.DevIp
}

func (p *FaceInfo) GetDevPort() int32 {
  return p.DevPort
}

func (p *FaceInfo) GetAbsTime() string {
  return p.AbsTime
}

func (p *FaceInfo) GetStayDuration() int32 {
  return p.StayDuration
}

func (p *FaceInfo) GetImageList() []*ImageContent {
  return p.ImageList
}

func (p *FaceInfo) GetRes() string {
  return p.Res
}

func (p *FaceInfo) GetDevID() string {
  return p.DevID
}
func (p *FaceInfo) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FaceInfo)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.GUID = v
}
  return nil
}

func (p *FaceInfo)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ProxyIp = v
}
  return nil
}

func (p *FaceInfo)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ProxyPort = v
}
  return nil
}

func (p *FaceInfo)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.UploadTime = v
}
  return nil
}

func (p *FaceInfo)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.DevIp = v
}
  return nil
}

func (p *FaceInfo)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.DevPort = v
}
  return nil
}

func (p *FaceInfo)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.AbsTime = v
}
  return nil
}

func (p *FaceInfo)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.StayDuration = v
}
  return nil
}

func (p *FaceInfo)  ReadField9(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ImageContent, 0, size)
  p.ImageList =  tSlice
  for i := 0; i < size; i ++ {
    _elem0 := &ImageContent{}
    if err := _elem0.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
    }
    p.ImageList = append(p.ImageList, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *FaceInfo)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.Res = v
}
  return nil
}

func (p *FaceInfo)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.DevID = v
}
  return nil
}

func (p *FaceInfo) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("FaceInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FaceInfo) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("guid", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:guid: ", p), err) }
  if err := oprot.WriteString(string(p.GUID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.guid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:guid: ", p), err) }
  return err
}

func (p *FaceInfo) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("proxyIp", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:proxyIp: ", p), err) }
  if err := oprot.WriteString(string(p.ProxyIp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.proxyIp (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:proxyIp: ", p), err) }
  return err
}

func (p *FaceInfo) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("proxyPort", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:proxyPort: ", p), err) }
  if err := oprot.WriteI32(int32(p.ProxyPort)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.proxyPort (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:proxyPort: ", p), err) }
  return err
}

func (p *FaceInfo) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uploadTime", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:uploadTime: ", p), err) }
  if err := oprot.WriteString(string(p.UploadTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uploadTime (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:uploadTime: ", p), err) }
  return err
}

func (p *FaceInfo) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("devIp", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:devIp: ", p), err) }
  if err := oprot.WriteString(string(p.DevIp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.devIp (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:devIp: ", p), err) }
  return err
}

func (p *FaceInfo) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("devPort", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:devPort: ", p), err) }
  if err := oprot.WriteI32(int32(p.DevPort)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.devPort (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:devPort: ", p), err) }
  return err
}

func (p *FaceInfo) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("absTime", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:absTime: ", p), err) }
  if err := oprot.WriteString(string(p.AbsTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.absTime (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:absTime: ", p), err) }
  return err
}

func (p *FaceInfo) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("stayDuration", thrift.I32, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:stayDuration: ", p), err) }
  if err := oprot.WriteI32(int32(p.StayDuration)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.stayDuration (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:stayDuration: ", p), err) }
  return err
}

func (p *FaceInfo) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("imageList", thrift.LIST, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:imageList: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ImageList)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ImageList {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:imageList: ", p), err) }
  return err
}

func (p *FaceInfo) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("res", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:res: ", p), err) }
  if err := oprot.WriteString(string(p.Res)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.res (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:res: ", p), err) }
  return err
}

func (p *FaceInfo) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("devID", thrift.STRING, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:devID: ", p), err) }
  if err := oprot.WriteString(string(p.DevID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.devID (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:devID: ", p), err) }
  return err
}

func (p *FaceInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FaceInfo(%+v)", *p)
}

// Attributes:
//  - ImgType
//  - ImgUrl
//  - ImgData
type ImageContent struct {
  ImgType string `thrift:"imgType,1" db:"imgType" json:"imgType"`
  ImgUrl string `thrift:"imgUrl,2" db:"imgUrl" json:"imgUrl"`
  ImgData []byte `thrift:"imgData,3" db:"imgData" json:"imgData"`
}

func NewImageContent() *ImageContent {
  return &ImageContent{}
}


func (p *ImageContent) GetImgType() string {
  return p.ImgType
}

func (p *ImageContent) GetImgUrl() string {
  return p.ImgUrl
}

func (p *ImageContent) GetImgData() []byte {
  return p.ImgData
}
func (p *ImageContent) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ImageContent)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ImgType = v
}
  return nil
}

func (p *ImageContent)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ImgUrl = v
}
  return nil
}

func (p *ImageContent)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ImgData = v
}
  return nil
}

func (p *ImageContent) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ImageContent"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ImageContent) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("imgType", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:imgType: ", p), err) }
  if err := oprot.WriteString(string(p.ImgType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.imgType (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:imgType: ", p), err) }
  return err
}

func (p *ImageContent) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("imgUrl", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:imgUrl: ", p), err) }
  if err := oprot.WriteString(string(p.ImgUrl)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.imgUrl (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:imgUrl: ", p), err) }
  return err
}

func (p *ImageContent) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("imgData", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:imgData: ", p), err) }
  if err := oprot.WriteBinary(p.ImgData); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.imgData (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:imgData: ", p), err) }
  return err
}

func (p *ImageContent) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ImageContent(%+v)", *p)
}

// Attributes:
//  - GUID
//  - ProxyIp
//  - ProxyPort
//  - RoadCode
//  - ChannelCode
//  - DeviceCode
//  - PlateNumber
//  - PlateColor
//  - PlateType
//  - VehicleColor
//  - VehicleType
//  - VehicleSpeed
//  - VehicleLength
//  - DirectionType
//  - VehicleBrand
//  - VehicleSubBrand
//  - VehicleNK
//  - VehicleBelong
//  - PeccancyType
//  - AccessTime
//  - ImageList
//  - DeviceType
//  - AreaCode
//  - Res
//  - Res1
//  - ImageDown
type VehicleInfo struct {
  GUID string `thrift:"guid,1" db:"guid" json:"guid"`
  ProxyIp string `thrift:"proxyIp,2" db:"proxyIp" json:"proxyIp"`
  ProxyPort int32 `thrift:"proxyPort,3" db:"proxyPort" json:"proxyPort"`
  RoadCode string `thrift:"roadCode,4" db:"roadCode" json:"roadCode"`
  ChannelCode string `thrift:"channelCode,5" db:"channelCode" json:"channelCode"`
  DeviceCode string `thrift:"deviceCode,6" db:"deviceCode" json:"deviceCode"`
  PlateNumber string `thrift:"plateNumber,7" db:"plateNumber" json:"plateNumber"`
  PlateColor string `thrift:"plateColor,8" db:"plateColor" json:"plateColor"`
  PlateType string `thrift:"plateType,9" db:"plateType" json:"plateType"`
  VehicleColor string `thrift:"vehicleColor,10" db:"vehicleColor" json:"vehicleColor"`
  VehicleType string `thrift:"VehicleType,11" db:"VehicleType" json:"VehicleType"`
  VehicleSpeed float64 `thrift:"vehicleSpeed,12" db:"vehicleSpeed" json:"vehicleSpeed"`
  VehicleLength float64 `thrift:"vehicleLength,13" db:"vehicleLength" json:"vehicleLength"`
  DirectionType string `thrift:"DirectionType,14" db:"DirectionType" json:"DirectionType"`
  VehicleBrand string `thrift:"VehicleBrand,15" db:"VehicleBrand" json:"VehicleBrand"`
  VehicleSubBrand string `thrift:"VehicleSubBrand,16" db:"VehicleSubBrand" json:"VehicleSubBrand"`
  VehicleNK string `thrift:"VehicleNK,17" db:"VehicleNK" json:"VehicleNK"`
  VehicleBelong string `thrift:"VehicleBelong,18" db:"VehicleBelong" json:"VehicleBelong"`
  PeccancyType string `thrift:"PeccancyType,19" db:"PeccancyType" json:"PeccancyType"`
  AccessTime string `thrift:"accessTime,20" db:"accessTime" json:"accessTime"`
  ImageList []*ImageContent `thrift:"imageList,21" db:"imageList" json:"imageList"`
  DeviceType string `thrift:"deviceType,22" db:"deviceType" json:"deviceType"`
  AreaCode string `thrift:"AreaCode,23" db:"AreaCode" json:"AreaCode"`
  Res string `thrift:"res,24" db:"res" json:"res"`
  Res1 string `thrift:"res1,25" db:"res1" json:"res1"`
  ImageDown bool `thrift:"imageDown,26" db:"imageDown" json:"imageDown"`
}

func NewVehicleInfo() *VehicleInfo {
  return &VehicleInfo{}
}


func (p *VehicleInfo) GetGUID() string {
  return p.GUID
}

func (p *VehicleInfo) GetProxyIp() string {
  return p.ProxyIp
}

func (p *VehicleInfo) GetProxyPort() int32 {
  return p.ProxyPort
}

func (p *VehicleInfo) GetRoadCode() string {
  return p.RoadCode
}

func (p *VehicleInfo) GetChannelCode() string {
  return p.ChannelCode
}

func (p *VehicleInfo) GetDeviceCode() string {
  return p.DeviceCode
}

func (p *VehicleInfo) GetPlateNumber() string {
  return p.PlateNumber
}

func (p *VehicleInfo) GetPlateColor() string {
  return p.PlateColor
}

func (p *VehicleInfo) GetPlateType() string {
  return p.PlateType
}

func (p *VehicleInfo) GetVehicleColor() string {
  return p.VehicleColor
}

func (p *VehicleInfo) GetVehicleType() string {
  return p.VehicleType
}

func (p *VehicleInfo) GetVehicleSpeed() float64 {
  return p.VehicleSpeed
}

func (p *VehicleInfo) GetVehicleLength() float64 {
  return p.VehicleLength
}

func (p *VehicleInfo) GetDirectionType() string {
  return p.DirectionType
}

func (p *VehicleInfo) GetVehicleBrand() string {
  return p.VehicleBrand
}

func (p *VehicleInfo) GetVehicleSubBrand() string {
  return p.VehicleSubBrand
}

func (p *VehicleInfo) GetVehicleNK() string {
  return p.VehicleNK
}

func (p *VehicleInfo) GetVehicleBelong() string {
  return p.VehicleBelong
}

func (p *VehicleInfo) GetPeccancyType() string {
  return p.PeccancyType
}

func (p *VehicleInfo) GetAccessTime() string {
  return p.AccessTime
}

func (p *VehicleInfo) GetImageList() []*ImageContent {
  return p.ImageList
}

func (p *VehicleInfo) GetDeviceType() string {
  return p.DeviceType
}

func (p *VehicleInfo) GetAreaCode() string {
  return p.AreaCode
}

func (p *VehicleInfo) GetRes() string {
  return p.Res
}

func (p *VehicleInfo) GetRes1() string {
  return p.Res1
}

func (p *VehicleInfo) GetImageDown() bool {
  return p.ImageDown
}
func (p *VehicleInfo) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField13(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField14(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField15(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 16:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField16(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 17:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField17(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 18:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField18(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 19:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField19(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 20:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField20(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 21:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField21(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 22:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField22(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 23:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField23(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 24:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField24(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 25:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField25(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 26:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField26(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *VehicleInfo)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.GUID = v
}
  return nil
}

func (p *VehicleInfo)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ProxyIp = v
}
  return nil
}

func (p *VehicleInfo)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ProxyPort = v
}
  return nil
}

func (p *VehicleInfo)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.RoadCode = v
}
  return nil
}

func (p *VehicleInfo)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.ChannelCode = v
}
  return nil
}

func (p *VehicleInfo)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.DeviceCode = v
}
  return nil
}

func (p *VehicleInfo)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.PlateNumber = v
}
  return nil
}

func (p *VehicleInfo)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.PlateColor = v
}
  return nil
}

func (p *VehicleInfo)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.PlateType = v
}
  return nil
}

func (p *VehicleInfo)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.VehicleColor = v
}
  return nil
}

func (p *VehicleInfo)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.VehicleType = v
}
  return nil
}

func (p *VehicleInfo)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.VehicleSpeed = v
}
  return nil
}

func (p *VehicleInfo)  ReadField13(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.VehicleLength = v
}
  return nil
}

func (p *VehicleInfo)  ReadField14(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.DirectionType = v
}
  return nil
}

func (p *VehicleInfo)  ReadField15(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  p.VehicleBrand = v
}
  return nil
}

func (p *VehicleInfo)  ReadField16(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 16: ", err)
} else {
  p.VehicleSubBrand = v
}
  return nil
}

func (p *VehicleInfo)  ReadField17(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 17: ", err)
} else {
  p.VehicleNK = v
}
  return nil
}

func (p *VehicleInfo)  ReadField18(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 18: ", err)
} else {
  p.VehicleBelong = v
}
  return nil
}

func (p *VehicleInfo)  ReadField19(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 19: ", err)
} else {
  p.PeccancyType = v
}
  return nil
}

func (p *VehicleInfo)  ReadField20(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  p.AccessTime = v
}
  return nil
}

func (p *VehicleInfo)  ReadField21(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ImageContent, 0, size)
  p.ImageList =  tSlice
  for i := 0; i < size; i ++ {
    _elem1 := &ImageContent{}
    if err := _elem1.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem1), err)
    }
    p.ImageList = append(p.ImageList, _elem1)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *VehicleInfo)  ReadField22(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 22: ", err)
} else {
  p.DeviceType = v
}
  return nil
}

func (p *VehicleInfo)  ReadField23(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 23: ", err)
} else {
  p.AreaCode = v
}
  return nil
}

func (p *VehicleInfo)  ReadField24(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 24: ", err)
} else {
  p.Res = v
}
  return nil
}

func (p *VehicleInfo)  ReadField25(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 25: ", err)
} else {
  p.Res1 = v
}
  return nil
}

func (p *VehicleInfo)  ReadField26(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 26: ", err)
} else {
  p.ImageDown = v
}
  return nil
}

func (p *VehicleInfo) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("VehicleInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField13(oprot); err != nil { return err }
    if err := p.writeField14(oprot); err != nil { return err }
    if err := p.writeField15(oprot); err != nil { return err }
    if err := p.writeField16(oprot); err != nil { return err }
    if err := p.writeField17(oprot); err != nil { return err }
    if err := p.writeField18(oprot); err != nil { return err }
    if err := p.writeField19(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
    if err := p.writeField21(oprot); err != nil { return err }
    if err := p.writeField22(oprot); err != nil { return err }
    if err := p.writeField23(oprot); err != nil { return err }
    if err := p.writeField24(oprot); err != nil { return err }
    if err := p.writeField25(oprot); err != nil { return err }
    if err := p.writeField26(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *VehicleInfo) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("guid", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:guid: ", p), err) }
  if err := oprot.WriteString(string(p.GUID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.guid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:guid: ", p), err) }
  return err
}

func (p *VehicleInfo) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("proxyIp", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:proxyIp: ", p), err) }
  if err := oprot.WriteString(string(p.ProxyIp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.proxyIp (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:proxyIp: ", p), err) }
  return err
}

func (p *VehicleInfo) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("proxyPort", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:proxyPort: ", p), err) }
  if err := oprot.WriteI32(int32(p.ProxyPort)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.proxyPort (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:proxyPort: ", p), err) }
  return err
}

func (p *VehicleInfo) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("roadCode", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:roadCode: ", p), err) }
  if err := oprot.WriteString(string(p.RoadCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.roadCode (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:roadCode: ", p), err) }
  return err
}

func (p *VehicleInfo) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("channelCode", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:channelCode: ", p), err) }
  if err := oprot.WriteString(string(p.ChannelCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.channelCode (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:channelCode: ", p), err) }
  return err
}

func (p *VehicleInfo) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("deviceCode", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:deviceCode: ", p), err) }
  if err := oprot.WriteString(string(p.DeviceCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.deviceCode (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:deviceCode: ", p), err) }
  return err
}

func (p *VehicleInfo) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("plateNumber", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:plateNumber: ", p), err) }
  if err := oprot.WriteString(string(p.PlateNumber)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.plateNumber (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:plateNumber: ", p), err) }
  return err
}

func (p *VehicleInfo) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("plateColor", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:plateColor: ", p), err) }
  if err := oprot.WriteString(string(p.PlateColor)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.plateColor (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:plateColor: ", p), err) }
  return err
}

func (p *VehicleInfo) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("plateType", thrift.STRING, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:plateType: ", p), err) }
  if err := oprot.WriteString(string(p.PlateType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.plateType (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:plateType: ", p), err) }
  return err
}

func (p *VehicleInfo) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("vehicleColor", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:vehicleColor: ", p), err) }
  if err := oprot.WriteString(string(p.VehicleColor)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vehicleColor (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:vehicleColor: ", p), err) }
  return err
}

func (p *VehicleInfo) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("VehicleType", thrift.STRING, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:VehicleType: ", p), err) }
  if err := oprot.WriteString(string(p.VehicleType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.VehicleType (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:VehicleType: ", p), err) }
  return err
}

func (p *VehicleInfo) writeField12(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("vehicleSpeed", thrift.DOUBLE, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:vehicleSpeed: ", p), err) }
  if err := oprot.WriteDouble(float64(p.VehicleSpeed)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vehicleSpeed (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:vehicleSpeed: ", p), err) }
  return err
}

func (p *VehicleInfo) writeField13(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("vehicleLength", thrift.DOUBLE, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:vehicleLength: ", p), err) }
  if err := oprot.WriteDouble(float64(p.VehicleLength)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vehicleLength (13) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:vehicleLength: ", p), err) }
  return err
}

func (p *VehicleInfo) writeField14(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("DirectionType", thrift.STRING, 14); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:DirectionType: ", p), err) }
  if err := oprot.WriteString(string(p.DirectionType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.DirectionType (14) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 14:DirectionType: ", p), err) }
  return err
}

func (p *VehicleInfo) writeField15(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("VehicleBrand", thrift.STRING, 15); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:VehicleBrand: ", p), err) }
  if err := oprot.WriteString(string(p.VehicleBrand)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.VehicleBrand (15) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 15:VehicleBrand: ", p), err) }
  return err
}

func (p *VehicleInfo) writeField16(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("VehicleSubBrand", thrift.STRING, 16); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:VehicleSubBrand: ", p), err) }
  if err := oprot.WriteString(string(p.VehicleSubBrand)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.VehicleSubBrand (16) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 16:VehicleSubBrand: ", p), err) }
  return err
}

func (p *VehicleInfo) writeField17(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("VehicleNK", thrift.STRING, 17); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:VehicleNK: ", p), err) }
  if err := oprot.WriteString(string(p.VehicleNK)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.VehicleNK (17) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 17:VehicleNK: ", p), err) }
  return err
}

func (p *VehicleInfo) writeField18(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("VehicleBelong", thrift.STRING, 18); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:VehicleBelong: ", p), err) }
  if err := oprot.WriteString(string(p.VehicleBelong)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.VehicleBelong (18) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 18:VehicleBelong: ", p), err) }
  return err
}

func (p *VehicleInfo) writeField19(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("PeccancyType", thrift.STRING, 19); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:PeccancyType: ", p), err) }
  if err := oprot.WriteString(string(p.PeccancyType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.PeccancyType (19) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 19:PeccancyType: ", p), err) }
  return err
}

func (p *VehicleInfo) writeField20(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("accessTime", thrift.STRING, 20); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:accessTime: ", p), err) }
  if err := oprot.WriteString(string(p.AccessTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.accessTime (20) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 20:accessTime: ", p), err) }
  return err
}

func (p *VehicleInfo) writeField21(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("imageList", thrift.LIST, 21); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:imageList: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ImageList)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ImageList {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 21:imageList: ", p), err) }
  return err
}

func (p *VehicleInfo) writeField22(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("deviceType", thrift.STRING, 22); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:deviceType: ", p), err) }
  if err := oprot.WriteString(string(p.DeviceType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.deviceType (22) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 22:deviceType: ", p), err) }
  return err
}

func (p *VehicleInfo) writeField23(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("AreaCode", thrift.STRING, 23); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 23:AreaCode: ", p), err) }
  if err := oprot.WriteString(string(p.AreaCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.AreaCode (23) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 23:AreaCode: ", p), err) }
  return err
}

func (p *VehicleInfo) writeField24(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("res", thrift.STRING, 24); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 24:res: ", p), err) }
  if err := oprot.WriteString(string(p.Res)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.res (24) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 24:res: ", p), err) }
  return err
}

func (p *VehicleInfo) writeField25(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("res1", thrift.STRING, 25); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 25:res1: ", p), err) }
  if err := oprot.WriteString(string(p.Res1)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.res1 (25) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 25:res1: ", p), err) }
  return err
}

func (p *VehicleInfo) writeField26(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("imageDown", thrift.BOOL, 26); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 26:imageDown: ", p), err) }
  if err := oprot.WriteBool(bool(p.ImageDown)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.imageDown (26) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 26:imageDown: ", p), err) }
  return err
}

func (p *VehicleInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("VehicleInfo(%+v)", *p)
}

// Attributes:
//  - ChannelState
//  - RoadCode
//  - ChannelCode
//  - ProxyIp
//  - ProxyPort
//  - UploadTime
//  - GUID
type ChannelStateInfo struct {
  ChannelState int32 `thrift:"channelState,1" db:"channelState" json:"channelState"`
  RoadCode string `thrift:"roadCode,2" db:"roadCode" json:"roadCode"`
  ChannelCode string `thrift:"channelCode,3" db:"channelCode" json:"channelCode"`
  ProxyIp string `thrift:"proxyIp,4" db:"proxyIp" json:"proxyIp"`
  ProxyPort int32 `thrift:"proxyPort,5" db:"proxyPort" json:"proxyPort"`
  UploadTime string `thrift:"uploadTime,6" db:"uploadTime" json:"uploadTime"`
  GUID string `thrift:"guid,7" db:"guid" json:"guid"`
}

func NewChannelStateInfo() *ChannelStateInfo {
  return &ChannelStateInfo{}
}


func (p *ChannelStateInfo) GetChannelState() int32 {
  return p.ChannelState
}

func (p *ChannelStateInfo) GetRoadCode() string {
  return p.RoadCode
}

func (p *ChannelStateInfo) GetChannelCode() string {
  return p.ChannelCode
}

func (p *ChannelStateInfo) GetProxyIp() string {
  return p.ProxyIp
}

func (p *ChannelStateInfo) GetProxyPort() int32 {
  return p.ProxyPort
}

func (p *ChannelStateInfo) GetUploadTime() string {
  return p.UploadTime
}

func (p *ChannelStateInfo) GetGUID() string {
  return p.GUID
}
func (p *ChannelStateInfo) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ChannelStateInfo)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ChannelState = v
}
  return nil
}

func (p *ChannelStateInfo)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.RoadCode = v
}
  return nil
}

func (p *ChannelStateInfo)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ChannelCode = v
}
  return nil
}

func (p *ChannelStateInfo)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.ProxyIp = v
}
  return nil
}

func (p *ChannelStateInfo)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.ProxyPort = v
}
  return nil
}

func (p *ChannelStateInfo)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.UploadTime = v
}
  return nil
}

func (p *ChannelStateInfo)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.GUID = v
}
  return nil
}

func (p *ChannelStateInfo) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ChannelStateInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ChannelStateInfo) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("channelState", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:channelState: ", p), err) }
  if err := oprot.WriteI32(int32(p.ChannelState)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.channelState (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:channelState: ", p), err) }
  return err
}

func (p *ChannelStateInfo) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("roadCode", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:roadCode: ", p), err) }
  if err := oprot.WriteString(string(p.RoadCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.roadCode (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:roadCode: ", p), err) }
  return err
}

func (p *ChannelStateInfo) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("channelCode", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:channelCode: ", p), err) }
  if err := oprot.WriteString(string(p.ChannelCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.channelCode (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:channelCode: ", p), err) }
  return err
}

func (p *ChannelStateInfo) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("proxyIp", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:proxyIp: ", p), err) }
  if err := oprot.WriteString(string(p.ProxyIp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.proxyIp (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:proxyIp: ", p), err) }
  return err
}

func (p *ChannelStateInfo) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("proxyPort", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:proxyPort: ", p), err) }
  if err := oprot.WriteI32(int32(p.ProxyPort)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.proxyPort (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:proxyPort: ", p), err) }
  return err
}

func (p *ChannelStateInfo) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uploadTime", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:uploadTime: ", p), err) }
  if err := oprot.WriteString(string(p.UploadTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uploadTime (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:uploadTime: ", p), err) }
  return err
}

func (p *ChannelStateInfo) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("guid", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:guid: ", p), err) }
  if err := oprot.WriteString(string(p.GUID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.guid (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:guid: ", p), err) }
  return err
}

func (p *ChannelStateInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ChannelStateInfo(%+v)", *p)
}

type ThriftProxyService interface {
  // Parameters:
  //  - VehicleInfoList
  OnUploadVehicleInfos(ctx context.Context, vehicleInfoList []*VehicleInfo) (r int32, err error)
  // Parameters:
  //  - ChannelStateInfoList
  OnChannelState(ctx context.Context, channelStateInfoList []*ChannelStateInfo) (r int32, err error)
  OnState(ctx context.Context) (r int32, err error)
  // Parameters:
  //  - FaceInfoList
  OnUploadFaceInfos(ctx context.Context, faceInfoList []*FaceInfo) (r int32, err error)
}

type ThriftProxyServiceClient struct {
  c thrift.TClient
}

func NewThriftProxyServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *ThriftProxyServiceClient {
  return &ThriftProxyServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewThriftProxyServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *ThriftProxyServiceClient {
  return &ThriftProxyServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewThriftProxyServiceClient(c thrift.TClient) *ThriftProxyServiceClient {
  return &ThriftProxyServiceClient{
    c: c,
  }
}

func (p *ThriftProxyServiceClient) Client_() thrift.TClient {
  return p.c
}
// Parameters:
//  - VehicleInfoList
func (p *ThriftProxyServiceClient) OnUploadVehicleInfos(ctx context.Context, vehicleInfoList []*VehicleInfo) (r int32, err error) {
  var _args2 ThriftProxyServiceOnUploadVehicleInfosArgs
  _args2.VehicleInfoList = vehicleInfoList
  var _result3 ThriftProxyServiceOnUploadVehicleInfosResult
  if err = p.Client_().Call(ctx, "onUploadVehicleInfos", &_args2, &_result3); err != nil {
    return
  }
  return _result3.GetSuccess(), nil
}

// Parameters:
//  - ChannelStateInfoList
func (p *ThriftProxyServiceClient) OnChannelState(ctx context.Context, channelStateInfoList []*ChannelStateInfo) (r int32, err error) {
  var _args4 ThriftProxyServiceOnChannelStateArgs
  _args4.ChannelStateInfoList = channelStateInfoList
  var _result5 ThriftProxyServiceOnChannelStateResult
  if err = p.Client_().Call(ctx, "onChannelState", &_args4, &_result5); err != nil {
    return
  }
  return _result5.GetSuccess(), nil
}

func (p *ThriftProxyServiceClient) OnState(ctx context.Context) (r int32, err error) {
  var _args6 ThriftProxyServiceOnStateArgs
  var _result7 ThriftProxyServiceOnStateResult
  if err = p.Client_().Call(ctx, "onState", &_args6, &_result7); err != nil {
    return
  }
  return _result7.GetSuccess(), nil
}

// Parameters:
//  - FaceInfoList
func (p *ThriftProxyServiceClient) OnUploadFaceInfos(ctx context.Context, faceInfoList []*FaceInfo) (r int32, err error) {
  var _args8 ThriftProxyServiceOnUploadFaceInfosArgs
  _args8.FaceInfoList = faceInfoList
  var _result9 ThriftProxyServiceOnUploadFaceInfosResult
  if err = p.Client_().Call(ctx, "onUploadFaceInfos", &_args8, &_result9); err != nil {
    return
  }
  return _result9.GetSuccess(), nil
}

type ThriftProxyServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler ThriftProxyService
}

func (p *ThriftProxyServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *ThriftProxyServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *ThriftProxyServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewThriftProxyServiceProcessor(handler ThriftProxyService) *ThriftProxyServiceProcessor {

  self10 := &ThriftProxyServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self10.processorMap["onUploadVehicleInfos"] = &thriftProxyServiceProcessorOnUploadVehicleInfos{handler:handler}
  self10.processorMap["onChannelState"] = &thriftProxyServiceProcessorOnChannelState{handler:handler}
  self10.processorMap["onState"] = &thriftProxyServiceProcessorOnState{handler:handler}
  self10.processorMap["onUploadFaceInfos"] = &thriftProxyServiceProcessorOnUploadFaceInfos{handler:handler}
return self10
}

func (p *ThriftProxyServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x11 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x11.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x11

}

type thriftProxyServiceProcessorOnUploadVehicleInfos struct {
  handler ThriftProxyService
}

func (p *thriftProxyServiceProcessorOnUploadVehicleInfos) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftProxyServiceOnUploadVehicleInfosArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("onUploadVehicleInfos", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ThriftProxyServiceOnUploadVehicleInfosResult{}
var retval int32
  var err2 error
  if retval, err2 = p.handler.OnUploadVehicleInfos(ctx, args.VehicleInfoList); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing onUploadVehicleInfos: " + err2.Error())
    oprot.WriteMessageBegin("onUploadVehicleInfos", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("onUploadVehicleInfos", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftProxyServiceProcessorOnChannelState struct {
  handler ThriftProxyService
}

func (p *thriftProxyServiceProcessorOnChannelState) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftProxyServiceOnChannelStateArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("onChannelState", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ThriftProxyServiceOnChannelStateResult{}
var retval int32
  var err2 error
  if retval, err2 = p.handler.OnChannelState(ctx, args.ChannelStateInfoList); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing onChannelState: " + err2.Error())
    oprot.WriteMessageBegin("onChannelState", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("onChannelState", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftProxyServiceProcessorOnState struct {
  handler ThriftProxyService
}

func (p *thriftProxyServiceProcessorOnState) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftProxyServiceOnStateArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("onState", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ThriftProxyServiceOnStateResult{}
var retval int32
  var err2 error
  if retval, err2 = p.handler.OnState(ctx); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing onState: " + err2.Error())
    oprot.WriteMessageBegin("onState", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("onState", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftProxyServiceProcessorOnUploadFaceInfos struct {
  handler ThriftProxyService
}

func (p *thriftProxyServiceProcessorOnUploadFaceInfos) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftProxyServiceOnUploadFaceInfosArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("onUploadFaceInfos", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ThriftProxyServiceOnUploadFaceInfosResult{}
var retval int32
  var err2 error
  if retval, err2 = p.handler.OnUploadFaceInfos(ctx, args.FaceInfoList); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing onUploadFaceInfos: " + err2.Error())
    oprot.WriteMessageBegin("onUploadFaceInfos", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("onUploadFaceInfos", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - VehicleInfoList
type ThriftProxyServiceOnUploadVehicleInfosArgs struct {
  VehicleInfoList []*VehicleInfo `thrift:"vehicleInfoList,1" db:"vehicleInfoList" json:"vehicleInfoList"`
}

func NewThriftProxyServiceOnUploadVehicleInfosArgs() *ThriftProxyServiceOnUploadVehicleInfosArgs {
  return &ThriftProxyServiceOnUploadVehicleInfosArgs{}
}


func (p *ThriftProxyServiceOnUploadVehicleInfosArgs) GetVehicleInfoList() []*VehicleInfo {
  return p.VehicleInfoList
}
func (p *ThriftProxyServiceOnUploadVehicleInfosArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftProxyServiceOnUploadVehicleInfosArgs)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*VehicleInfo, 0, size)
  p.VehicleInfoList =  tSlice
  for i := 0; i < size; i ++ {
    _elem12 := &VehicleInfo{}
    if err := _elem12.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem12), err)
    }
    p.VehicleInfoList = append(p.VehicleInfoList, _elem12)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ThriftProxyServiceOnUploadVehicleInfosArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("onUploadVehicleInfos_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftProxyServiceOnUploadVehicleInfosArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("vehicleInfoList", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:vehicleInfoList: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.VehicleInfoList)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.VehicleInfoList {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:vehicleInfoList: ", p), err) }
  return err
}

func (p *ThriftProxyServiceOnUploadVehicleInfosArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftProxyServiceOnUploadVehicleInfosArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ThriftProxyServiceOnUploadVehicleInfosResult struct {
  Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewThriftProxyServiceOnUploadVehicleInfosResult() *ThriftProxyServiceOnUploadVehicleInfosResult {
  return &ThriftProxyServiceOnUploadVehicleInfosResult{}
}

var ThriftProxyServiceOnUploadVehicleInfosResult_Success_DEFAULT int32
func (p *ThriftProxyServiceOnUploadVehicleInfosResult) GetSuccess() int32 {
  if !p.IsSetSuccess() {
    return ThriftProxyServiceOnUploadVehicleInfosResult_Success_DEFAULT
  }
return *p.Success
}
func (p *ThriftProxyServiceOnUploadVehicleInfosResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftProxyServiceOnUploadVehicleInfosResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftProxyServiceOnUploadVehicleInfosResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *ThriftProxyServiceOnUploadVehicleInfosResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("onUploadVehicleInfos_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftProxyServiceOnUploadVehicleInfosResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftProxyServiceOnUploadVehicleInfosResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftProxyServiceOnUploadVehicleInfosResult(%+v)", *p)
}

// Attributes:
//  - ChannelStateInfoList
type ThriftProxyServiceOnChannelStateArgs struct {
  ChannelStateInfoList []*ChannelStateInfo `thrift:"channelStateInfoList,1" db:"channelStateInfoList" json:"channelStateInfoList"`
}

func NewThriftProxyServiceOnChannelStateArgs() *ThriftProxyServiceOnChannelStateArgs {
  return &ThriftProxyServiceOnChannelStateArgs{}
}


func (p *ThriftProxyServiceOnChannelStateArgs) GetChannelStateInfoList() []*ChannelStateInfo {
  return p.ChannelStateInfoList
}
func (p *ThriftProxyServiceOnChannelStateArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftProxyServiceOnChannelStateArgs)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ChannelStateInfo, 0, size)
  p.ChannelStateInfoList =  tSlice
  for i := 0; i < size; i ++ {
    _elem13 := &ChannelStateInfo{}
    if err := _elem13.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem13), err)
    }
    p.ChannelStateInfoList = append(p.ChannelStateInfoList, _elem13)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ThriftProxyServiceOnChannelStateArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("onChannelState_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftProxyServiceOnChannelStateArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("channelStateInfoList", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:channelStateInfoList: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ChannelStateInfoList)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ChannelStateInfoList {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:channelStateInfoList: ", p), err) }
  return err
}

func (p *ThriftProxyServiceOnChannelStateArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftProxyServiceOnChannelStateArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ThriftProxyServiceOnChannelStateResult struct {
  Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewThriftProxyServiceOnChannelStateResult() *ThriftProxyServiceOnChannelStateResult {
  return &ThriftProxyServiceOnChannelStateResult{}
}

var ThriftProxyServiceOnChannelStateResult_Success_DEFAULT int32
func (p *ThriftProxyServiceOnChannelStateResult) GetSuccess() int32 {
  if !p.IsSetSuccess() {
    return ThriftProxyServiceOnChannelStateResult_Success_DEFAULT
  }
return *p.Success
}
func (p *ThriftProxyServiceOnChannelStateResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftProxyServiceOnChannelStateResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftProxyServiceOnChannelStateResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *ThriftProxyServiceOnChannelStateResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("onChannelState_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftProxyServiceOnChannelStateResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftProxyServiceOnChannelStateResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftProxyServiceOnChannelStateResult(%+v)", *p)
}

type ThriftProxyServiceOnStateArgs struct {
}

func NewThriftProxyServiceOnStateArgs() *ThriftProxyServiceOnStateArgs {
  return &ThriftProxyServiceOnStateArgs{}
}

func (p *ThriftProxyServiceOnStateArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftProxyServiceOnStateArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("onState_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftProxyServiceOnStateArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftProxyServiceOnStateArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ThriftProxyServiceOnStateResult struct {
  Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewThriftProxyServiceOnStateResult() *ThriftProxyServiceOnStateResult {
  return &ThriftProxyServiceOnStateResult{}
}

var ThriftProxyServiceOnStateResult_Success_DEFAULT int32
func (p *ThriftProxyServiceOnStateResult) GetSuccess() int32 {
  if !p.IsSetSuccess() {
    return ThriftProxyServiceOnStateResult_Success_DEFAULT
  }
return *p.Success
}
func (p *ThriftProxyServiceOnStateResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftProxyServiceOnStateResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftProxyServiceOnStateResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *ThriftProxyServiceOnStateResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("onState_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftProxyServiceOnStateResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftProxyServiceOnStateResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftProxyServiceOnStateResult(%+v)", *p)
}

// Attributes:
//  - FaceInfoList
type ThriftProxyServiceOnUploadFaceInfosArgs struct {
  FaceInfoList []*FaceInfo `thrift:"faceInfoList,1" db:"faceInfoList" json:"faceInfoList"`
}

func NewThriftProxyServiceOnUploadFaceInfosArgs() *ThriftProxyServiceOnUploadFaceInfosArgs {
  return &ThriftProxyServiceOnUploadFaceInfosArgs{}
}


func (p *ThriftProxyServiceOnUploadFaceInfosArgs) GetFaceInfoList() []*FaceInfo {
  return p.FaceInfoList
}
func (p *ThriftProxyServiceOnUploadFaceInfosArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftProxyServiceOnUploadFaceInfosArgs)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*FaceInfo, 0, size)
  p.FaceInfoList =  tSlice
  for i := 0; i < size; i ++ {
    _elem14 := &FaceInfo{}
    if err := _elem14.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem14), err)
    }
    p.FaceInfoList = append(p.FaceInfoList, _elem14)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ThriftProxyServiceOnUploadFaceInfosArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("onUploadFaceInfos_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftProxyServiceOnUploadFaceInfosArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("faceInfoList", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:faceInfoList: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.FaceInfoList)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.FaceInfoList {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:faceInfoList: ", p), err) }
  return err
}

func (p *ThriftProxyServiceOnUploadFaceInfosArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftProxyServiceOnUploadFaceInfosArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ThriftProxyServiceOnUploadFaceInfosResult struct {
  Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewThriftProxyServiceOnUploadFaceInfosResult() *ThriftProxyServiceOnUploadFaceInfosResult {
  return &ThriftProxyServiceOnUploadFaceInfosResult{}
}

var ThriftProxyServiceOnUploadFaceInfosResult_Success_DEFAULT int32
func (p *ThriftProxyServiceOnUploadFaceInfosResult) GetSuccess() int32 {
  if !p.IsSetSuccess() {
    return ThriftProxyServiceOnUploadFaceInfosResult_Success_DEFAULT
  }
return *p.Success
}
func (p *ThriftProxyServiceOnUploadFaceInfosResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftProxyServiceOnUploadFaceInfosResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftProxyServiceOnUploadFaceInfosResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *ThriftProxyServiceOnUploadFaceInfosResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("onUploadFaceInfos_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftProxyServiceOnUploadFaceInfosResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftProxyServiceOnUploadFaceInfosResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftProxyServiceOnUploadFaceInfosResult(%+v)", *p)
}


